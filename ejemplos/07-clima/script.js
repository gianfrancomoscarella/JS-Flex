// Configuraci√≥n de la aplicaci√≥n
const CONFIG = {
    API_KEY: '0ca063b746578ffb14d9f9455bdb165a',
    API_BASE_URL: 'https://api.openweathermap.org/data/2.5',
    ICON_BASE_URL: 'https://openweathermap.org/img/wn'
};

// Elementos del DOM
const elements = {
    form: document.getElementById('weatherForm'),
    cityInput: document.getElementById('cityInput'),
    searchBtn: document.getElementById('searchBtn'),
    loading: document.getElementById('loading'),
    weatherResult: document.getElementById('weatherResult'),
    errorMessage: document.getElementById('errorMessage'),
    retryBtn: document.getElementById('retryBtn'),
    
    // Elementos de datos del clima
    cityName: document.getElementById('cityName'),
    countryFlag: document.getElementById('countryFlag'),
    temperature: document.getElementById('temperature'),
    feelsLike: document.getElementById('feelsLike'),
    weatherIcon: document.getElementById('weatherIcon'),
    weatherDescription: document.getElementById('weatherDescription'),
    humidity: document.getElementById('humidity'),
    windSpeed: document.getElementById('windSpeed'),
    pressure: document.getElementById('pressure'),
    visibility: document.getElementById('visibility'),
    sunrise: document.getElementById('sunrise'),
    sunset: document.getElementById('sunset'),
    errorText: document.getElementById('errorText')
};

// Mapeo de pa√≠ses a banderas (emojis)
const countryFlags = {
    'AD': 'üá¶üá©', 'AE': 'üá¶üá™', 'AF': 'üá¶üá´', 'AG': 'üá¶üá¨', 'AI': 'üá¶üáÆ', 'AL': 'üá¶üá±', 'AM': 'üá¶üá≤',
    'AO': 'üá¶üá¥', 'AQ': 'üá¶üá∂', 'AR': 'üá¶üá∑', 'AS': 'üá¶üá∏', 'AT': 'üá¶üáπ', 'AU': 'üá¶üá∫', 'AW': 'üá¶üáº',
    'AX': 'üá¶üáΩ', 'AZ': 'üá¶üáø', 'BA': 'üáßüá¶', 'BB': 'üáßüáß', 'BD': 'üáßüá©', 'BE': 'üáßüá™', 'BF': 'üáßüá´',
    'BG': 'üáßüá¨', 'BH': 'üáßüá≠', 'BI': 'üáßüáÆ', 'BJ': 'üáßüáØ', 'BL': 'üáßüá±', 'BM': 'üáßüá≤', 'BN': 'üáßüá≥',
    'BO': 'üáßüá¥', 'BQ': 'üáßüá∂', 'BR': 'üáßüá∑', 'BS': 'üáßüá∏', 'BT': 'üáßüáπ', 'BV': 'üáßüáª', 'BW': 'üáßüáº',
    'BY': 'üáßüáæ', 'BZ': 'üáßüáø', 'CA': 'üá®üá¶', 'CC': 'üá®üá®', 'CD': 'üá®üá©', 'CF': 'üá®üá´', 'CG': 'üá®üá¨',
    'CH': 'üá®üá≠', 'CI': 'üá®üáÆ', 'CK': 'üá®üá∞', 'CL': 'üá®üá±', 'CM': 'üá®üá≤', 'CN': 'üá®üá≥', 'CO': 'üá®üá¥',
    'CR': 'üá®üá∑', 'CU': 'üá®üá∫', 'CV': 'üá®üáª', 'CW': 'üá®üáº', 'CX': 'üá®üáΩ', 'CY': 'üá®üáæ', 'CZ': 'üá®üáø',
    'DE': 'üá©üá™', 'DJ': 'üá©üáØ', 'DK': 'üá©üá∞', 'DM': 'üá©üá≤', 'DO': 'üá©üá¥', 'DZ': 'üá©üáø', 'EC': 'üá™üá®',
    'EE': 'üá™üá™', 'EG': 'üá™üá¨', 'EH': 'üá™üá≠', 'ER': 'üá™üá∑', 'ES': 'üá™üá∏', 'ET': 'üá™üáπ', 'FI': 'üá´üáÆ',
    'FJ': 'üá´üáØ', 'FK': 'üá´üá∞', 'FM': 'üá´üá≤', 'FO': 'üá´üá¥', 'FR': 'üá´üá∑', 'GA': 'üá¨üá¶', 'GB': 'üá¨üáß',
    'GD': 'üá¨üá©', 'GE': 'üá¨üá™', 'GF': 'üá¨üá´', 'GG': 'üá¨üá¨', 'GH': 'üá¨üá≠', 'GI': 'üá¨üáÆ', 'GL': 'üá¨üá±',
    'GM': 'üá¨üá≤', 'GN': 'üá¨üá≥', 'GP': 'üá¨üáµ', 'GQ': 'üá¨üá∂', 'GR': 'üá¨üá∑', 'GS': 'üá¨üá∏', 'GT': 'üá¨üáπ',
    'GU': 'üá¨üá∫', 'GW': 'üá¨üáº', 'GY': 'üá¨üáæ', 'HK': 'üá≠üá∞', 'HM': 'üá≠üá≤', 'HN': 'üá≠üá≥', 'HR': 'üá≠üá∑',
    'HT': 'üá≠üáπ', 'HU': 'üá≠üá∫', 'ID': 'üáÆüá©', 'IE': 'üáÆüá™', 'IL': 'üáÆüá±', 'IM': 'üáÆüá≤', 'IN': 'üáÆüá≥',
    'IO': 'üáÆüá¥', 'IQ': 'üáÆüá∂', 'IR': 'üáÆüá∑', 'IS': 'üáÆüá∏', 'IT': 'üáÆüáπ', 'JE': 'üáØüá™', 'JM': 'üáØüá≤',
    'JO': 'üáØüá¥', 'JP': 'üáØüáµ', 'KE': 'üá∞üá™', 'KG': 'üá∞üá¨', 'KH': 'üá∞üá≠', 'KI': 'üá∞üáÆ', 'KM': 'üá∞üá≤',
    'KN': 'üá∞üá≥', 'KP': 'üá∞üáµ', 'KR': 'üá∞üá∑', 'KW': 'üá∞üáº', 'KY': 'üá∞üáæ', 'KZ': 'üá∞üáø', 'LA': 'üá±üá¶',
    'LB': 'üá±üáß', 'LC': 'üá±üá®', 'LI': 'üá±üáÆ', 'LK': 'üá±üá∞', 'LR': 'üá±üá∑', 'LS': 'üá±üá∏', 'LT': 'üá±üáπ',
    'LU': 'üá±üá∫', 'LV': 'üá±üáª', 'LY': 'üá±üáæ', 'MA': 'üá≤üá¶', 'MC': 'üá≤üá®', 'MD': 'üá≤üá©', 'ME': 'üá≤üá™',
    'MF': 'üá≤üá´', 'MG': 'üá≤üá¨', 'MH': 'üá≤üá≠', 'MK': 'üá≤üá∞', 'ML': 'üá≤üá±', 'MM': 'üá≤üá≤', 'MN': 'üá≤üá≥',
    'MO': 'üá≤üá¥', 'MP': 'üá≤üáµ', 'MQ': 'üá≤üá∂', 'MR': 'üá≤üá∑', 'MS': 'üá≤üá∏', 'MT': 'üá≤üáπ', 'MU': 'üá≤üá∫',
    'MV': 'üá≤üáª', 'MW': 'üá≤üáº', 'MX': 'üá≤üáΩ', 'MY': 'üá≤üáæ', 'MZ': 'üá≤üáø', 'NA': 'üá≥üá¶', 'NC': 'üá≥üá®',
    'NE': 'üá≥üá™', 'NF': 'üá≥üá´', 'NG': 'üá≥üá¨', 'NI': 'üá≥üáÆ', 'NL': 'üá≥üá±', 'NO': 'üá≥üá¥', 'NP': 'üá≥üáµ',
    'NR': 'üá≥üá∑', 'NU': 'üá≥üá∫', 'NZ': 'üá≥üáø', 'OM': 'üá¥üá≤', 'PA': 'üáµüá¶', 'PE': 'üáµüá™', 'PF': 'üáµüá´',
    'PG': 'üáµüá¨', 'PH': 'üáµüá≠', 'PK': 'üáµüá∞', 'PL': 'üáµüá±', 'PM': 'üáµüá≤', 'PN': 'üáµüá≥', 'PR': 'üáµüá∑',
    'PS': 'üáµüá∏', 'PT': 'üáµüáπ', 'PW': 'üáµüáº', 'PY': 'üáµüáæ', 'QA': 'üá∂üá¶', 'RE': 'üá∑üá™', 'RO': 'üá∑üá¥',
    'RS': 'üá∑üá∏', 'RU': 'üá∑üá∫', 'RW': 'üá∑üáº', 'SA': 'üá∏üá¶', 'SB': 'üá∏üáß', 'SC': 'üá∏üá®', 'SD': 'üá∏üá©',
    'SE': 'üá∏üá™', 'SG': 'üá∏üá¨', 'SH': 'üá∏üá≠', 'SI': 'üá∏üáÆ', 'SJ': 'üá∏üáØ', 'SK': 'üá∏üá∞', 'SL': 'üá∏üá±',
    'SM': 'üá∏üá≤', 'SN': 'üá∏üá≥', 'SO': 'üá∏üá¥', 'SR': 'üá∏üá∑', 'SS': 'üá∏üá∏', 'ST': 'üá∏üáπ', 'SV': 'üá∏üáª',
    'SX': 'üá∏üáΩ', 'SY': 'üá∏üáæ', 'SZ': 'üá∏üáø', 'TC': 'üáπüá®', 'TD': 'üáπüá©', 'TF': 'üáπüá´', 'TG': 'üáπüá¨',
    'TH': 'üáπüá≠', 'TJ': 'üáπüáØ', 'TK': 'üáπüá∞', 'TL': 'üáπüá±', 'TM': 'üáπüá≤', 'TN': 'üáπüá≥', 'TO': 'üáπüá¥',
    'TR': 'üáπüá∑', 'TT': 'üáπüáπ', 'TV': 'üáπüáª', 'TW': 'üáπüáº', 'TZ': 'üáπüáø', 'UA': 'üá∫üá¶', 'UG': 'üá∫üá¨',
    'UM': 'üá∫üá≤', 'US': 'üá∫üá∏', 'UY': 'üá∫üáæ', 'UZ': 'üá∫üáø', 'VA': 'üáªüá¶', 'VC': 'üáªüá®', 'VE': 'üáªüá™',
    'VG': 'üáªüá¨', 'VI': 'üáªüáÆ', 'VN': 'üáªüá≥', 'VU': 'üáªüá∫', 'WF': 'üáºüá´', 'WS': 'üáºüá∏', 'YE': 'üáæüá™',
    'YT': 'üáæüáπ', 'ZA': 'üáøüá¶', 'ZM': 'üáøüá≤', 'ZW': 'üáøüáº'
};

// Inicializaci√≥n de la aplicaci√≥n
document.addEventListener('DOMContentLoaded', () => {
    console.log('üå§Ô∏è Clima App iniciada');
    setupEventListeners();
    
    // Enfocar el input al cargar la p√°gina
    elements.cityInput.focus();
});

// Configurar event listeners
function setupEventListeners() {
    // Formulario de b√∫squeda
    elements.form.addEventListener('submit', handleSearch);
    
    // Bot√≥n de reintentar
    elements.retryBtn.addEventListener('click', () => {
        hideError();
        elements.cityInput.focus();
    });
    
    // Enter en el input
    elements.cityInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleSearch(e);
        }
    });
}

// Manejar la b√∫squeda del clima
async function handleSearch(e) {
    e.preventDefault();
    
    const city = elements.cityInput.value.trim();
    
    if (!city) {
        showError('Por favor, ingresa el nombre de una ciudad');
        return;
    }
    
    try {
        showLoading();
        hideError();
        hideWeatherResult();
        
        const weatherData = await fetchWeatherData(city);
        displayWeatherData(weatherData);
        
    } catch (error) {
        console.error('Error al obtener el clima:', error);
        showError(error.message || 'Error al obtener los datos del clima');
    } finally {
        hideLoading();
    }
}

// Obtener datos del clima desde la API
async function fetchWeatherData(city) {
    const url = `${CONFIG.API_BASE_URL}/weather?q=${encodeURIComponent(city)}&appid=${CONFIG.API_KEY}&units=metric&lang=es`;
    
    console.log('üåê Consultando API:', url.replace(CONFIG.API_KEY, '[API_KEY]'));
    
    const response = await fetch(url);
    
    if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        switch (response.status) {
            case 404:
                throw new Error(`No se encontr√≥ informaci√≥n para "${city}". Verifica el nombre de la ciudad.`);
            case 401:
                throw new Error('Error de autorizaci√≥n. Clave de API inv√°lida.');
            case 429:
                throw new Error('L√≠mite de consultas excedido. Intenta m√°s tarde.');
            case 500:
                throw new Error('Error del servidor. Intenta m√°s tarde.');
            default:
                throw new Error(errorData.message || `Error ${response.status}: No se pudo obtener el clima`);
        }
    }
    
    const data = await response.json();
    console.log('‚úÖ Datos recibidos:', data);
    
    return data;
}

// Mostrar los datos del clima en la interfaz
function displayWeatherData(data) {
    try {
        // Informaci√≥n b√°sica
        elements.cityName.textContent = `${data.name}`;
        elements.countryFlag.textContent = getCountryFlag(data.sys.country);
        
        // Temperatura
        elements.temperature.textContent = Math.round(data.main.temp);
        elements.feelsLike.textContent = Math.round(data.main.feels_like);
        
        // Icono y descripci√≥n del clima
        const iconCode = data.weather[0].icon;
        elements.weatherIcon.src = `${CONFIG.ICON_BASE_URL}/${iconCode}@2x.png`;
        elements.weatherIcon.alt = data.weather[0].description;
        elements.weatherDescription.textContent = data.weather[0].description;
        
        // Detalles del clima
        elements.humidity.textContent = `${data.main.humidity}%`;
        elements.windSpeed.textContent = `${data.wind.speed} m/s`;
        elements.pressure.textContent = `${data.main.pressure} hPa`;
        elements.visibility.textContent = data.visibility ? `${(data.visibility / 1000).toFixed(1)} km` : 'N/A';
        
        // Horas de amanecer y atardecer
        elements.sunrise.textContent = formatTime(data.sys.sunrise, data.timezone);
        elements.sunset.textContent = formatTime(data.sys.sunset, data.timezone);
        
        // Aplicar tema visual seg√∫n el clima
        applyWeatherTheme(data.weather[0].main);
        
        showWeatherResult();
        
    } catch (error) {
        console.error('Error al mostrar los datos:', error);
        showError('Error al mostrar los datos del clima');
    }
}

// Obtener la bandera del pa√≠s
function getCountryFlag(countryCode) {
    return countryFlags[countryCode] || 'üåç';
}

// Formatear hora Unix a hora local
function formatTime(timestamp, timezone) {
    try {
        const date = new Date((timestamp + timezone) * 1000);
        return date.toUTCString().slice(-12, -7);
    } catch (error) {
        console.error('Error al formatear hora:', error);
        return 'N/A';
    }
}

// Aplicar tema visual seg√∫n el tipo de clima
function applyWeatherTheme(weatherMain) {
    // Remover clases de tema previas
    elements.weatherResult.classList.remove('sunny', 'cloudy', 'rainy', 'snowy', 'stormy');
    
    // Aplicar nueva clase seg√∫n el clima
    switch (weatherMain.toLowerCase()) {
        case 'clear':
            elements.weatherResult.classList.add('sunny');
            break;
        case 'clouds':
            elements.weatherResult.classList.add('cloudy');
            break;
        case 'rain':
        case 'drizzle':
            elements.weatherResult.classList.add('rainy');
            break;
        case 'snow':
            elements.weatherResult.classList.add('snowy');
            break;
        case 'thunderstorm':
            elements.weatherResult.classList.add('stormy');
            break;
        default:
            // Tema por defecto
            break;
    }
}

// Funciones de UI
function showLoading() {
    elements.loading.classList.remove('hidden');
    elements.searchBtn.disabled = true;
    elements.searchBtn.textContent = '‚è≥ Buscando...';
}

function hideLoading() {
    elements.loading.classList.add('hidden');
    elements.searchBtn.disabled = false;
    elements.searchBtn.textContent = 'üîç Buscar';
}

function showWeatherResult() {
    elements.weatherResult.classList.remove('hidden');
}

function hideWeatherResult() {
    elements.weatherResult.classList.add('hidden');
}

function showError(message) {
    elements.errorText.textContent = message;
    elements.errorMessage.classList.remove('hidden');
}

function hideError() {
    elements.errorMessage.classList.add('hidden');
}

// Manejo de errores globales
window.addEventListener('error', (e) => {
    console.error('Error global:', e.error);
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('Promise rechazada:', e.reason);
    showError('Error inesperado. Por favor, intenta de nuevo.');
});

// Log de inicio
console.log('üå§Ô∏è Clima App Script Cargado - Versi√≥n 1.0');
